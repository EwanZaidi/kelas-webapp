{"remainingRequest":"/Users/ridhwan/Documents/GitHub/kelas-webapp/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/ridhwan/Documents/GitHub/kelas-webapp/node_modules/angular-calendar/esm5/angular-calendar.js","dependencies":[{"path":"/Users/ridhwan/Documents/GitHub/kelas-webapp/node_modules/angular-calendar/esm5/angular-calendar.js","mtime":499162500000},{"path":"/Users/ridhwan/Documents/GitHub/kelas-webapp/node_modules/cache-loader/dist/cjs.js","mtime":1528854867615},{"path":"/Users/ridhwan/Documents/GitHub/kelas-webapp/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __spread, __extends } from 'tslib';\nimport { validateEvents, getMonthView, getWeekViewHeader, getWeekView, getDayView, getDayViewHourGrid } from 'calendar-utils';\nexport { DAYS_OF_WEEK } from 'calendar-utils';\nimport { Component, Input, Directive, HostListener, Injector, ComponentFactoryResolver, ViewContainerRef, ElementRef, Inject, Renderer2, Output, EventEmitter, Pipe, LOCALE_ID, Injectable, InjectionToken, NgModule, ChangeDetectorRef } from '@angular/core';\nimport { DOCUMENT, DatePipe, CommonModule } from '@angular/common';\nimport { Positioning } from 'positioning';\nimport subDays from 'date-fns/sub_days/index';\nimport subWeeks from 'date-fns/sub_weeks/index';\nimport subMonths from 'date-fns/sub_months/index';\nimport addDays from 'date-fns/add_days/index';\nimport addWeeks from 'date-fns/add_weeks/index';\nimport addMonths from 'date-fns/add_months/index';\nimport startOfToday from 'date-fns/start_of_today/index';\nimport getISOWeek from 'date-fns/get_iso_week/index';\nimport { DraggableHelper, DragAndDropModule } from 'angular-draggable-droppable';\nimport 'rxjs/Subject';\nimport isSameDay from 'date-fns/is_same_day/index';\nimport setDate from 'date-fns/set_date/index';\nimport setMonth from 'date-fns/set_month/index';\nimport setYear from 'date-fns/set_year/index';\nimport getDate from 'date-fns/get_date/index';\nimport getMonth from 'date-fns/get_month/index';\nimport getYear from 'date-fns/get_year/index';\nimport differenceInSeconds from 'date-fns/difference_in_seconds/index';\nimport addSeconds from 'date-fns/add_seconds/index';\nimport { trigger, style, transition, animate } from '@angular/animations';\nimport { ResizableModule } from 'angular-resizable-element';\nimport addMinutes from 'date-fns/add_minutes/index';\nvar validateEvents$1 = function (events) {\n    var warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return console.warn.apply(console, __spread(['angular-calendar'], args));\n    };\n    return validateEvents(events, warn);\n};\nfunction isInside(outer, inner) {\n    return (outer.left <= inner.left &&\n        inner.left <= outer.right &&\n        outer.left <= inner.right &&\n        inner.right <= outer.right &&\n        outer.top <= inner.top &&\n        inner.top <= outer.bottom &&\n        outer.top <= inner.bottom &&\n        inner.bottom <= outer.bottom);\n}\nvar trackByEventId = function (index, event) { return event.id ? event.id : event; };\nvar trackByWeekDayHeaderDate = function (index, day) { return day.date.toISOString(); };\nvar trackByIndex = function (index) { return index; };\nvar CalendarEventActionsComponent = /*@__PURE__*/ (function () {\n    function CalendarEventActionsComponent() {\n        this.trackByIndex = trackByIndex;\n    }\n    return CalendarEventActionsComponent;\n}());\nvar CalendarEventTitleComponent = /*@__PURE__*/ (function () {\n    function CalendarEventTitleComponent() {\n    }\n    return CalendarEventTitleComponent;\n}());\nvar CalendarTooltipWindowComponent = /*@__PURE__*/ (function () {\n    function CalendarTooltipWindowComponent() {\n    }\n    return CalendarTooltipWindowComponent;\n}());\nvar CalendarTooltipDirective = /*@__PURE__*/ (function () {\n    function CalendarTooltipDirective(elementRef, injector, renderer, componentFactoryResolver, viewContainerRef, document) {\n        this.elementRef = elementRef;\n        this.injector = injector;\n        this.renderer = renderer;\n        this.viewContainerRef = viewContainerRef;\n        this.document\n            = document;\n        this.placement = 'top';\n        this.positioning = new Positioning();\n        this.tooltipFactory = componentFactoryResolver.resolveComponentFactory(CalendarTooltipWindowComponent);\n    }\n    CalendarTooltipDirective.prototype.ngOnDestroy = function () {\n        this.hide();\n    };\n    CalendarTooltipDirective.prototype.onMouseOver = function () {\n        this.show();\n    };\n    CalendarTooltipDirective.prototype.onMouseOut = function () {\n        this.hide();\n    };\n    CalendarTooltipDirective.prototype.show = function () {\n        var _this = this;\n        if (!this.tooltipRef && this.contents) {\n            this.tooltipRef = this.viewContainerRef.createComponent(this.tooltipFactory, 0, this.injector, []);\n            this.tooltipRef.instance.contents = this.contents;\n            this.tooltipRef.instance.placement = this.placement;\n            this.tooltipRef.instance.customTemplate = this.customTemplate;\n            this.tooltipRef.instance.event = this.event;\n            if (this.appendToBody) {\n                this.document.body.appendChild(this.tooltipRef.location.nativeElement);\n            }\n            requestAnimationFrame(function () {\n                _this.positionTooltip();\n            });\n        }\n    };\n    CalendarTooltipDirective.prototype.hide = function () {\n        if (this.tooltipRef) {\n            this.viewContainerRef.remove(this.viewContainerRef.indexOf(this.tooltipRef.hostView));\n            this.tooltipRef = null;\n        }\n    };\n    CalendarTooltipDirective.prototype.positionTooltip = function () {\n        if (this.tooltipRef) {\n            var targetPosition = this.positioning.positionElements(this.elementRef.nativeElement, this.tooltipRef.location.nativeElement.children[0], this.placement, this.appendToBody);\n            var elm = this.tooltipRef.location.nativeElement\n                .children[0];\n            this.renderer.setStyle(elm, 'top', targetPosition.top + \"px\");\n            this.renderer.setStyle(elm, 'left', targetPosition.left + \"px\");\n        }\n    };\n    return CalendarTooltipDirective;\n}());\nvar CalendarPreviousViewDirective = /*@__PURE__*/ (function () {\n    function CalendarPreviousViewDirective() {\n        this.viewDateChange = new EventEmitter();\n    }\n    CalendarPreviousViewDirective.prototype.onClick = function () {\n        var subFn = {\n            day: subDays,\n            week: subWeeks,\n            month: subMonths\n        }[this.view];\n        this.viewDateChange.emit(subFn(this.viewDate, 1));\n    };\n    return CalendarPreviousViewDirective;\n}());\nvar CalendarNextViewDirective = /*@__PURE__*/ (function () {\n    function CalendarNextViewDirective() {\n        this.viewDateChange = new EventEmitter();\n    }\n    CalendarNextViewDirective.prototype.onClick = function () {\n        var addFn = {\n            day: addDays,\n            week: addWeeks,\n            month: addMonths\n        }[this.view];\n        this.viewDateChange.emit(addFn(this.viewDate, 1));\n    };\n    return CalendarNextViewDirective;\n}());\nvar CalendarTodayDirective = /*@__PURE__*/ (function () {\n    function CalendarTodayDirective() {\n        this.viewDateChange = new EventEmitter();\n    }\n    CalendarTodayDirective.prototype.onClick = function () {\n        this.viewDateChange.emit(startOfToday());\n    };\n    return CalendarTodayDirective;\n}());\nvar CalendarAngularDateFormatter = /*@__PURE__*/ (function () {\n    function CalendarAngularDateFormatter() {\n    }\n    CalendarAngularDateFormatter.prototype.monthViewColumnHeader = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return new DatePipe(locale).transform(date, 'EEEE', null, locale);\n    };\n    CalendarAngularDateFormatter.prototype.monthViewDayNumber = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return new DatePipe(locale).transform(date, 'd', null, locale);\n    };\n    CalendarAngularDateFormatter.prototype.monthViewTitle = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return new DatePipe(locale).transform(date, 'MMMM y', null, locale);\n    };\n    CalendarAngularDateFormatter.prototype.weekViewColumnHeader = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return new DatePipe(locale).transform(date, 'EEEE', null, locale);\n    };\n    CalendarAngularDateFormatter.prototype.weekViewColumnSubHeader = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return new DatePipe(locale).transform(date, 'MMM d', null, locale);\n    };\n    CalendarAngularDateFormatter.prototype.weekViewTitle = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        var year = new DatePipe(locale).transform(date, 'y', null, locale);\n        var weekNumber = getISOWeek(date);\n        return \"Week \" + weekNumber + \" of \" + year;\n    };\n    CalendarAngularDateFormatter.prototype.dayViewHour = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return new DatePipe(locale).transform(date, 'h a', null, locale);\n    };\n    CalendarAngularDateFormatter.prototype.dayViewTitle = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return new DatePipe(locale).transform(date, 'EEEE, MMMM d, y', null, locale);\n    };\n    return CalendarAngularDateFormatter;\n}());\nvar CalendarDateFormatter = /*@__PURE__*/ (function (_super) {\n    __extends(CalendarDateFormatter, _super);\n    function CalendarDateFormatter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return CalendarDateFormatter;\n}(CalendarAngularDateFormatter));\nvar CalendarDatePipe = /*@__PURE__*/ (function () {\n    function CalendarDatePipe(dateFormatter, locale) {\n        this.dateFormatter = dateFormatter;\n        this.locale = locale;\n    }\n    CalendarDatePipe.prototype.transform = function (date, method, locale) {\n        if (locale === void 0) {\n            locale = this.locale;\n        }\n        return this.dateFormatter[method]({ date: date, locale: locale });\n    };\n    return CalendarDatePipe;\n}());\nvar CalendarEventTitleFormatter = /*@__PURE__*/ (function () {\n    function CalendarEventTitleFormatter() {\n    }\n    CalendarEventTitleFormatter.prototype.month = function (event) {\n        return event.title;\n    };\n    CalendarEventTitleFormatter.prototype.monthTooltip = function (event) {\n        return event.title;\n    };\n    CalendarEventTitleFormatter.prototype.week = function (event) {\n        return event.title;\n    };\n    CalendarEventTitleFormatter.prototype.weekTooltip = function (event) {\n        return event.title;\n    };\n    CalendarEventTitleFormatter.prototype.day = function (event) {\n        return event.title;\n    };\n    CalendarEventTitleFormatter.prototype.dayTooltip = function (event) {\n        return event.title;\n    };\n    return CalendarEventTitleFormatter;\n}());\nvar CalendarEventTitlePipe = /*@__PURE__*/ (function () {\n    function CalendarEventTitlePipe(calendarEventTitle) {\n        this.calendarEventTitle = calendarEventTitle;\n    }\n    CalendarEventTitlePipe.prototype.transform = function (title, titleType, event) {\n        return this.calendarEventTitle[titleType](event);\n    };\n    return CalendarEventTitlePipe;\n}());\nvar ClickDirective = /*@__PURE__*/ (function () {\n    function ClickDirective(renderer, elm) {\n        this.renderer = renderer;\n        this.elm = elm;\n        this.click = new EventEmitter();\n    }\n    ClickDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        var eventName = typeof window !== 'undefined' && typeof window['Hammer'] !== 'undefined'\n            ? 'tap'\n            : 'click';\n        this.removeListener = this.renderer.listen(this.elm.nativeElement, eventName, function (event) {\n            _this.click.next(event);\n        });\n    };\n    ClickDirective.prototype.ngOnDestroy = function () {\n        this.removeListener();\n    };\n    return ClickDirective;\n}());\nvar CalendarUtils = /*@__PURE__*/ (function () {\n    function CalendarUtils() {\n    }\n    CalendarUtils.prototype.getMonthView = function (args) {\n        return getMonthView(args);\n    };\n    CalendarUtils.prototype.getWeekViewHeader = function (args) {\n        return getWeekViewHeader(args);\n    };\n    CalendarUtils.prototype.getWeekView = function (args) {\n        return getWeekView(args);\n    };\n    CalendarUtils.prototype.getDayView = function (args) {\n        return getDayView(args);\n    };\n    CalendarUtils.prototype.getDayViewHourGrid = function (args) {\n        return getDayViewHourGrid(args);\n    };\n    return CalendarUtils;\n}());\nvar MOMENT = new InjectionToken('Moment');\nvar CalendarMomentDateFormatter = /*@__PURE__*/ (function () {\n    function CalendarMomentDateFormatter(moment) {\n        this.moment = moment;\n    }\n    CalendarMomentDateFormatter.prototype.monthViewColumnHeader = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return this.moment(date)\n            .locale(locale)\n            .format('dddd');\n    };\n    CalendarMomentDateFormatter.prototype.monthViewDayNumber = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return this.moment(date)\n            .locale(locale)\n            .format('D');\n    };\n    CalendarMomentDateFormatter.prototype.monthViewTitle = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return this.moment(date)\n            .locale(locale)\n            .format('MMMM YYYY');\n    };\n    CalendarMomentDateFormatter.prototype.weekViewColumnHeader = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return this.moment(date)\n            .locale(locale)\n            .format('dddd');\n    };\n    CalendarMomentDateFormatter.prototype.weekViewColumnSubHeader = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return this.moment(date)\n            .locale(locale)\n            .format('D MMM');\n    };\n    CalendarMomentDateFormatter.prototype.weekViewTitle = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return this.moment(date)\n            .locale(locale)\n            .format('[Week] W [of] YYYY');\n    };\n    CalendarMomentDateFormatter.prototype.dayViewHour = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return this.moment(date)\n            .locale(locale)\n            .format('ha');\n    };\n    CalendarMomentDateFormatter.prototype.dayViewTitle = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return this.moment(date)\n            .locale(locale)\n            .format('dddd, D MMMM, YYYY');\n    };\n    return CalendarMomentDateFormatter;\n}());\nvar CalendarNativeDateFormatter = /*@__PURE__*/ (function () {\n    function CalendarNativeDateFormatter() {\n    }\n    CalendarNativeDateFormatter.prototype.monthViewColumnHeader = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n    };\n    CalendarNativeDateFormatter.prototype.monthViewDayNumber = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(date);\n    };\n    CalendarNativeDateFormatter.prototype.monthViewTitle = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return new Intl.DateTimeFormat(locale, {\n            year: 'numeric',\n            month: 'long'\n        }).format(date);\n    };\n    CalendarNativeDateFormatter.prototype.weekViewColumnHeader = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n    };\n    CalendarNativeDateFormatter.prototype.weekViewColumnSubHeader = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return new Intl.DateTimeFormat(locale, {\n            day: 'numeric',\n            month: 'short'\n        }).format(date);\n    };\n    CalendarNativeDateFormatter.prototype.weekViewTitle = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        var year = new Intl.DateTimeFormat(locale, {\n            year: 'numeric'\n        }).format(date);\n        var weekNumber = getISOWeek(date);\n        return \"Week \" + weekNumber + \" of \" + year;\n    };\n    CalendarNativeDateFormatter.prototype.dayViewHour = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n    };\n    CalendarNativeDateFormatter.prototype.dayViewTitle = function (_a) {\n        var date = _a.date, locale = _a.locale;\n        return new Intl.DateTimeFormat(locale, {\n            day: 'numeric',\n            month: 'long',\n            year: 'numeric',\n            weekday: 'long'\n        }).format(date);\n    };\n    return CalendarNativeDateFormatter;\n}());\nvar CalendarCommonModule = /*@__PURE__*/ (function () {\n    function CalendarCommonModule() {\n    }\n    CalendarCommonModule.forRoot = function (config) {\n        if (config === void 0) {\n            config = {};\n        }\n        return {\n            ngModule: CalendarCommonModule,\n            providers: [\n                DraggableHelper,\n                config.eventTitleFormatter || CalendarEventTitleFormatter,\n                config.dateFormatter || CalendarDateFormatter,\n                config.utils || CalendarUtils\n            ]\n        };\n    };\n    return CalendarCommonModule;\n}());\nvar CalendarMonthViewComponent = /*@__PURE__*/ (function () {\n    function CalendarMonthViewComponent(cdr, utils, locale) {\n        this.cdr = cdr;\n        this.utils = utils;\n        this.events = [];\n        this.excludeDays = [];\n        this.activeDayIsOpen = false;\n        this.tooltipPlacement = 'top';\n        this.tooltipAppendToBody = true;\n        this.beforeViewRender = new EventEmitter();\n        this.dayClicked = new EventEmitter();\n        this.eventClicked = new EventEmitter();\n        this.eventTimesChanged = new EventEmitter();\n        this.trackByIndex = trackByIndex;\n        this.trackByDate = function (index, day) { return day.date.toISOString(); };\n        this.locale = locale;\n    }\n    CalendarMonthViewComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.refresh) {\n            this.refreshSubscription = this.refresh.subscribe(function () {\n                _this.refreshAll();\n                _this.cdr.markForCheck();\n            });\n        }\n    };\n    CalendarMonthViewComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.viewDate || changes.excludeDays || changes.weekendDays) {\n            this.refreshHeader();\n        }\n        if (changes.events) {\n            validateEvents$1(this.events);\n        }\n        if (changes.viewDate ||\n            changes.events ||\n            changes.excludeDays ||\n            changes.weekendDays) {\n            this.refreshBody();\n        }\n        if (changes.activeDayIsOpen ||\n            changes.viewDate ||\n            changes.events ||\n            changes.excludeDays) {\n            this.checkActiveDayIsOpen();\n        }\n    };\n    CalendarMonthViewComponent.prototype.ngOnDestroy = function () {\n        if (this.refreshSubscription) {\n            this.refreshSubscription.unsubscribe();\n        }\n    };\n    CalendarMonthViewComponent.prototype.toggleDayHighlight = function (event, isHighlighted) {\n        this.view.days.forEach(function (day) {\n            if (isHighlighted && day.events.indexOf(event) > -1) {\n                day.backgroundColor =\n                    (event.color && event.color.secondary) || '#D1E8FF';\n            }\n            else {\n                delete day.backgroundColor;\n            }\n        });\n    };\n    CalendarMonthViewComponent.prototype.eventDropped = function (day, event) {\n        var year = getYear(day.date);\n        var month = getMonth(day.date);\n        var date = getDate(day.date);\n        var newStart = setDate(setMonth(setYear(event.start, year), month), date);\n        var newEnd;\n        if (event.end) {\n            var secondsDiff = differenceInSeconds(newStart, event.start);\n            newEnd = addSeconds(event.end, secondsDiff);\n        }\n        this.eventTimesChanged.emit({ event: event, newStart: newStart, newEnd: newEnd, day: day });\n    };\n    CalendarMonthViewComponent.prototype.handleDayClick = function (clickEvent, day) {\n        if (!clickEvent.target.classList.contains('cal-event')) {\n            this.dayClicked.emit({ day: day });\n        }\n    };\n    CalendarMonthViewComponent.prototype.refreshHeader = function () {\n        this.columnHeaders = this.utils.getWeekViewHeader({\n            viewDate: this.viewDate,\n            weekStartsOn: this.weekStartsOn,\n            excluded: this.excludeDays,\n            weekendDays: this.weekendDays\n        });\n        this.emitBeforeViewRender();\n    };\n    CalendarMonthViewComponent.prototype.refreshBody = function () {\n        this.view = this.utils.getMonthView({\n            events: this.events,\n            viewDate: this.viewDate,\n            weekStartsOn: this.weekStartsOn,\n            excluded: this.excludeDays,\n            weekendDays: this.weekendDays\n        });\n        this.emitBeforeViewRender();\n    };\n    CalendarMonthViewComponent.prototype.checkActiveDayIsOpen = function () {\n        var _this = this;\n        if (this.activeDayIsOpen === true) {\n            this.openDay = this.view.days.find(function (day) { return isSameDay(day.date, _this.viewDate); });\n            var index = this.view.days.indexOf(this.openDay);\n            this.openRowIndex =\n                Math.floor(index / this.view.totalDaysVisibleInWeek) *\n                    this.view.totalDaysVisibleInWeek;\n        }\n        else {\n            this.openRowIndex = null;\n            this.openDay = null;\n        }\n    };\n    CalendarMonthViewComponent.prototype.refreshAll = function () {\n        this.columnHeaders = null;\n        this.view = null;\n        this.refreshHeader();\n        this.refreshBody();\n        this.checkActiveDayIsOpen();\n    };\n    CalendarMonthViewComponent.prototype.emitBeforeViewRender = function () {\n        if (this.columnHeaders && this.view) {\n            this.beforeViewRender.emit({\n                header: this.columnHeaders,\n                body: this.view.days,\n                period: this.view.period\n            });\n        }\n    };\n    return CalendarMonthViewComponent;\n}());\nvar CalendarMonthViewHeaderComponent = /*@__PURE__*/ (function () {\n    function CalendarMonthViewHeaderComponent() {\n        this.trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n    }\n    return CalendarMonthViewHeaderComponent;\n}());\nvar CalendarMonthCellComponent = /*@__PURE__*/ (function () {\n    function CalendarMonthCellComponent() {\n        this.highlightDay = new EventEmitter();\n        this.unhighlightDay = new EventEmitter();\n        this.eventClicked = new EventEmitter();\n        this.trackByEventId = trackByEventId;\n    }\n    return CalendarMonthCellComponent;\n}());\nvar CalendarOpenDayEventsComponent = /*@__PURE__*/ (function () {\n    function CalendarOpenDayEventsComponent() {\n        this.isOpen = false;\n        this.eventClicked = new EventEmitter();\n        this.trackByEventId = trackByEventId;\n    }\n    return CalendarOpenDayEventsComponent;\n}());\nvar CalendarMonthModule = /*@__PURE__*/ (function () {\n    function CalendarMonthModule() {\n    }\n    return CalendarMonthModule;\n}());\nvar CalendarDragHelper = /*@__PURE__*/ (function () {\n    function CalendarDragHelper(dragContainerElement, draggableElement) {\n        this.dragContainerElement = dragContainerElement;\n        this.startPosition = draggableElement.getBoundingClientRect();\n    }\n    CalendarDragHelper.prototype.validateDrag = function (_a) {\n        var x = _a.x, y = _a.y;\n        var newRect = Object.assign({}, this.startPosition, {\n            left: this.startPosition.left + x,\n            right: this.startPosition.right + x,\n            top: this.startPosition.top + y,\n            bottom: this.startPosition.bottom + y\n        });\n        return isInside(this.dragContainerElement.getBoundingClientRect(), newRect);\n    };\n    return CalendarDragHelper;\n}());\nvar CalendarResizeHelper = /*@__PURE__*/ (function () {\n    function CalendarResizeHelper(resizeContainerElement, minWidth) {\n        this.resizeContainerElement = resizeContainerElement;\n        this.minWidth = minWidth;\n    }\n    CalendarResizeHelper.prototype.validateResize = function (_a) {\n        var rectangle = _a.rectangle;\n        if (this.minWidth && rectangle.width < this.minWidth) {\n            return false;\n        }\n        return isInside(this.resizeContainerElement.getBoundingClientRect(), rectangle);\n    };\n    return CalendarResizeHelper;\n}());\nvar CalendarWeekViewComponent = /*@__PURE__*/ (function () {\n    function CalendarWeekViewComponent(cdr, utils, locale) {\n        this.cdr = cdr;\n        this.utils = utils;\n        this.events = [];\n        this.excludeDays = [];\n        this.tooltipPlacement = 'bottom';\n        this.tooltipAppendToBody = true;\n        this.precision = 'days';\n        this.dayHeaderClicked = new EventEmitter();\n        this.eventClicked = new EventEmitter();\n        this.eventTimesChanged = new EventEmitter();\n        this.beforeViewRender = new EventEmitter();\n        this.currentResizes = new Map();\n        this.trackByIndex = trackByIndex;\n        this.trackByEventId = function (index, weekEvent) { return weekEvent.event.id ? weekEvent.event.id : weekEvent; };\n        this.locale = locale;\n    }\n    CalendarWeekViewComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.refresh) {\n            this.refreshSubscription = this.refresh.subscribe(function () {\n                _this.refreshAll();\n                _this.cdr.markForCheck();\n            });\n        }\n    };\n    CalendarWeekViewComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.viewDate || changes.excludeDays || changes.weekendDays) {\n            this.refreshHeader();\n        }\n        if (changes.events) {\n            validateEvents$1(this.events);\n        }\n        if (changes.events || changes.viewDate || changes.excludeDays) {\n            this.refreshBody();\n        }\n    };\n    CalendarWeekViewComponent.prototype.ngOnDestroy = function () {\n        if (this.refreshSubscription) {\n            this.refreshSubscription.unsubscribe();\n        }\n    };\n    CalendarWeekViewComponent.prototype.resizeStarted = function (weekViewContainer, weekEvent, resizeEvent) {\n        this.currentResizes.set(weekEvent, {\n            originalOffset: weekEvent.offset,\n            originalSpan: weekEvent.span,\n            edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'\n        });\n        this.dayColumnWidth = this.getDayColumnWidth(weekViewContainer);\n        var resizeHelper = new CalendarResizeHelper(weekViewContainer, this.dayColumnWidth);\n        this.validateResize = function (_a) {\n            var rectangle = _a.rectangle;\n            return resizeHelper.validateResize({ rectangle: rectangle });\n        };\n        this.cdr.markForCheck();\n    };\n    CalendarWeekViewComponent.prototype.resizing = function (weekEvent, resizeEvent, dayWidth) {\n        var currentResize = this.currentResizes.get(weekEvent);\n        if (resizeEvent.edges.left) {\n            var diff = Math.round(+resizeEvent.edges.left / dayWidth);\n            weekEvent.offset = currentResize.originalOffset + diff;\n            weekEvent.span = currentResize.originalSpan - diff;\n        }\n        else if (resizeEvent.edges.right) {\n            var diff = Math.round(+resizeEvent.edges.right / dayWidth);\n            weekEvent.span = currentResize.originalSpan + diff;\n        }\n    };\n    CalendarWeekViewComponent.prototype.resizeEnded = function (weekEvent) {\n        var currentResize = this.currentResizes.get(weekEvent);\n        var daysDiff;\n        if (currentResize.edge === 'left') {\n            daysDiff = weekEvent.offset - currentResize.originalOffset;\n        }\n        else {\n            daysDiff = weekEvent.span - currentResize.originalSpan;\n        }\n        weekEvent.offset = currentResize.originalOffset;\n        weekEvent.span = currentResize.originalSpan;\n        var newStart = weekEvent.event.start;\n        var newEnd = weekEvent.event.end;\n        if (currentResize.edge === 'left') {\n            newStart = addDays(newStart, daysDiff);\n        }\n        else if (newEnd) {\n            newEnd = addDays(newEnd, daysDiff);\n        }\n        this.eventTimesChanged.emit({ newStart: newStart, newEnd: newEnd, event: weekEvent.event });\n        this.currentResizes.delete(weekEvent);\n    };\n    CalendarWeekViewComponent.prototype.eventDragged = function (weekEvent, draggedByPx, dayWidth) {\n        var daysDragged = draggedByPx / dayWidth;\n        var newStart = addDays(weekEvent.event.start, daysDragged);\n        var newEnd;\n        if (weekEvent.event.end) {\n            newEnd = addDays(weekEvent.event.end, daysDragged);\n        }\n        this.eventTimesChanged.emit({ newStart: newStart, newEnd: newEnd, event: weekEvent.event });\n    };\n    CalendarWeekViewComponent.prototype.getDayColumnWidth = function (eventRowContainer) {\n        return Math.floor(eventRowContainer.offsetWidth / this.days.length);\n    };\n    CalendarWeekViewComponent.prototype.dragStart = function (weekViewContainer, event) {\n        var _this = this;\n        this.dayColumnWidth = this.getDayColumnWidth(weekViewContainer);\n        var dragHelper = new CalendarDragHelper(weekViewContainer, event);\n        this.validateDrag = function (_a) {\n            var x = _a.x, y = _a.y;\n            return _this.currentResizes.size === 0 && dragHelper.validateDrag({ x: x, y: y });\n        };\n        this.cdr.markForCheck();\n    };\n    CalendarWeekViewComponent.prototype.refreshHeader = function () {\n        this.days = this.utils.getWeekViewHeader({\n            viewDate: this.viewDate,\n            weekStartsOn: this.weekStartsOn,\n            excluded: this.excludeDays,\n            weekendDays: this.weekendDays\n        });\n        this.emitBeforeViewRender();\n    };\n    CalendarWeekViewComponent.prototype.refreshBody = function () {\n        this.view = this.utils.getWeekView({\n            events: this.events,\n            viewDate: this.viewDate,\n            weekStartsOn: this.weekStartsOn,\n            excluded: this.excludeDays,\n            precision: this.precision,\n            absolutePositionedEvents: true\n        });\n        this.emitBeforeViewRender();\n    };\n    CalendarWeekViewComponent.prototype.refreshAll = function () {\n        this.refreshHeader();\n        this.refreshBody();\n    };\n    CalendarWeekViewComponent.prototype.emitBeforeViewRender = function () {\n        if (this.days && this.view) {\n            this.beforeViewRender.emit({\n                header: this.days,\n                period: this.view.period\n            });\n        }\n    };\n    return CalendarWeekViewComponent;\n}());\nvar CalendarWeekViewHeaderComponent = /*@__PURE__*/ (function () {\n    function CalendarWeekViewHeaderComponent() {\n        this.dayHeaderClicked = new EventEmitter();\n        this.eventDropped = new EventEmitter();\n        this.trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n    }\n    return CalendarWeekViewHeaderComponent;\n}());\nvar CalendarWeekViewEventComponent = /*@__PURE__*/ (function () {\n    function CalendarWeekViewEventComponent() {\n        this.eventClicked = new EventEmitter();\n    }\n    return CalendarWeekViewEventComponent;\n}());\nvar CalendarWeekModule = /*@__PURE__*/ (function () {\n    function CalendarWeekModule() {\n    }\n    return CalendarWeekModule;\n}());\nvar MINUTES_IN_HOUR = 60;\nvar CalendarDayViewComponent = /*@__PURE__*/ (function () {\n    function CalendarDayViewComponent(cdr, utils, locale) {\n        this.cdr = cdr;\n        this.utils = utils;\n        this.events = [];\n        this.hourSegments = 2;\n        this.hourSegmentHeight = 30;\n        this.dayStartHour = 0;\n        this.dayStartMinute = 0;\n        this.dayEndHour = 23;\n        this.dayEndMinute = 59;\n        this.eventWidth = 150;\n        this.eventSnapSize = this.hourSegmentHeight;\n        this.tooltipPlacement = 'top';\n        this.tooltipAppendToBody = true;\n        this.eventClicked = new EventEmitter();\n        this.hourSegmentClicked = new EventEmitter();\n        this.eventTimesChanged = new EventEmitter();\n        this.beforeViewRender = new EventEmitter();\n        this.hours = [];\n        this.width = 0;\n        this.currentResizes = new Map();\n        this.trackByEventId = trackByEventId;\n        this.trackByDayEvent = function (index, dayEvent) { return dayEvent.event.id ? dayEvent.event.id : dayEvent.event; };\n        this.trackByHour = function (index, hour) { return hour.segments[0].date.toISOString(); };\n        this.trackByHourSegment = function (index, segment) { return segment.date.toISOString(); };\n        this.locale = locale;\n    }\n    CalendarDayViewComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.refresh) {\n            this.refreshSubscription = this.refresh.subscribe(function () {\n                _this.refreshAll();\n                _this.cdr.markForCheck();\n            });\n        }\n    };\n    CalendarDayViewComponent.prototype.ngOnDestroy = function () {\n        if (this.refreshSubscription) {\n            this.refreshSubscription.unsubscribe();\n        }\n    };\n    CalendarDayViewComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.viewDate ||\n            changes.dayStartHour ||\n            changes.dayStartMinute ||\n            changes.dayEndHour ||\n            changes.dayEndMinute ||\n            changes.hourSegments) {\n            this.refreshHourGrid();\n        }\n        if (changes.events) {\n            validateEvents$1(this.events);\n        }\n        if (changes.viewDate ||\n            changes.events ||\n            changes.dayStartHour ||\n            changes.dayStartMinute ||\n            changes.dayEndHour ||\n            changes.dayEndMinute ||\n            changes.eventWidth) {\n            this.refreshView();\n        }\n    };\n    CalendarDayViewComponent.prototype.eventDropped = function (dropEvent, segment) {\n        if (dropEvent.dropData && dropEvent.dropData.event) {\n            this.eventTimesChanged.emit({\n                event: dropEvent.dropData.event,\n                newStart: segment.date\n            });\n        }\n    };\n    CalendarDayViewComponent.prototype.resizeStarted = function (event, resizeEvent, dayViewContainer) {\n        this.currentResizes.set(event, {\n            originalTop: event.top,\n            originalHeight: event.height,\n            edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'\n        });\n        var resizeHelper = new CalendarResizeHelper(dayViewContainer);\n        this.validateResize = function (_a) {\n            var rectangle = _a.rectangle;\n            return resizeHelper.validateResize({ rectangle: rectangle });\n        };\n        this.cdr.markForCheck();\n    };\n    CalendarDayViewComponent.prototype.resizing = function (event, resizeEvent) {\n        var currentResize = this.currentResizes.get(event);\n        if (resizeEvent.edges.top) {\n            event.top = currentResize.originalTop + +resizeEvent.edges.top;\n            event.height = currentResize.originalHeight - +resizeEvent.edges.top;\n        }\n        else if (resizeEvent.edges.bottom) {\n            event.height = currentResize.originalHeight + +resizeEvent.edges.bottom;\n        }\n    };\n    CalendarDayViewComponent.prototype.resizeEnded = function (dayEvent) {\n        var currentResize = this.currentResizes.get(dayEvent);\n        var pixelsMoved;\n        if (currentResize.edge === 'top') {\n            pixelsMoved = dayEvent.top - currentResize.originalTop;\n        }\n        else {\n            pixelsMoved = dayEvent.height - currentResize.originalHeight;\n        }\n        dayEvent.top = currentResize.originalTop;\n        dayEvent.height = currentResize.originalHeight;\n        var pixelAmountInMinutes = MINUTES_IN_HOUR / (this.hourSegments * this.hourSegmentHeight);\n        var minutesMoved = pixelsMoved * pixelAmountInMinutes;\n        var newStart = dayEvent.event.start;\n        var newEnd = dayEvent.event.end;\n        if (currentResize.edge === 'top') {\n            newStart = addMinutes(newStart, minutesMoved);\n        }\n        else if (newEnd) {\n            newEnd = addMinutes(newEnd, minutesMoved);\n        }\n        this.eventTimesChanged.emit({ newStart: newStart, newEnd: newEnd, event: dayEvent.event });\n        this.currentResizes.delete(dayEvent);\n    };\n    CalendarDayViewComponent.prototype.dragStart = function (event, dayViewContainer) {\n        var _this = this;\n        var dragHelper = new CalendarDragHelper(dayViewContainer, event);\n        this.validateDrag = function (_a) {\n            var x = _a.x, y = _a.y;\n            return _this.currentResizes.size === 0 && dragHelper.validateDrag({ x: x, y: y });\n        };\n        this.cdr.markForCheck();\n    };\n    CalendarDayViewComponent.prototype.eventDragged = function (dayEvent, draggedInPixels) {\n        var pixelAmountInMinutes = MINUTES_IN_HOUR / (this.hourSegments * this.hourSegmentHeight);\n        var minutesMoved = draggedInPixels * pixelAmountInMinutes;\n        var newStart = addMinutes(dayEvent.event.start, minutesMoved);\n        var newEnd;\n        if (dayEvent.event.end) {\n            newEnd = addMinutes(dayEvent.event.end, minutesMoved);\n        }\n        this.eventTimesChanged.emit({ newStart: newStart, newEnd: newEnd, event: dayEvent.event });\n    };\n    CalendarDayViewComponent.prototype.refreshHourGrid = function () {\n        this.hours = this.utils.getDayViewHourGrid({\n            viewDate: this.viewDate,\n            hourSegments: this.hourSegments,\n            dayStart: {\n                hour: this.dayStartHour,\n                minute: this.dayStartMinute\n            },\n            dayEnd: {\n                hour: this.dayEndHour,\n                minute: this.dayEndMinute\n            }\n        });\n        this.emitBeforeViewRender();\n    };\n    CalendarDayViewComponent.prototype.refreshView = function () {\n        this.view = this.utils.getDayView({\n            events: this.events,\n            viewDate: this.viewDate,\n            hourSegments: this.hourSegments,\n            dayStart: {\n                hour: this.dayStartHour,\n                minute: this.dayStartMinute\n            },\n            dayEnd: {\n                hour: this.dayEndHour,\n                minute: this.dayEndMinute\n            },\n            eventWidth: this.eventWidth,\n            segmentHeight: this.hourSegmentHeight\n        });\n        this.emitBeforeViewRender();\n    };\n    CalendarDayViewComponent.prototype.refreshAll = function () {\n        this.refreshHourGrid();\n        this.refreshView();\n    };\n    CalendarDayViewComponent.prototype.emitBeforeViewRender = function () {\n        if (this.hours && this.view) {\n            this.beforeViewRender.emit({\n                body: {\n                    hourGrid: this.hours\n                },\n                period: this.view.period\n            });\n        }\n    };\n    return CalendarDayViewComponent;\n}());\nvar CalendarAllDayEventComponent = /*@__PURE__*/ (function () {\n    function CalendarAllDayEventComponent() {\n        this.eventClicked = new EventEmitter();\n    }\n    return CalendarAllDayEventComponent;\n}());\nvar CalendarDayViewHourSegmentComponent = /*@__PURE__*/ (function () {\n    function CalendarDayViewHourSegmentComponent() {\n    }\n    return CalendarDayViewHourSegmentComponent;\n}());\nvar CalendarDayViewEventComponent = /*@__PURE__*/ (function () {\n    function CalendarDayViewEventComponent() {\n        this.eventClicked = new EventEmitter();\n    }\n    return CalendarDayViewEventComponent;\n}());\nvar CalendarDayModule = /*@__PURE__*/ (function () {\n    function CalendarDayModule() {\n    }\n    return CalendarDayModule;\n}());\nvar CalendarModule = /*@__PURE__*/ (function () {\n    function CalendarModule() {\n    }\n    CalendarModule.forRoot = function (config) {\n        if (config === void 0) {\n            config = {};\n        }\n        return {\n            ngModule: CalendarModule,\n            providers: [\n                DraggableHelper,\n                config.eventTitleFormatter || CalendarEventTitleFormatter,\n                config.dateFormatter || CalendarDateFormatter,\n                config.utils || CalendarUtils\n            ]\n        };\n    };\n    return CalendarModule;\n}());\nexport { CalendarModule, CalendarCommonModule, CalendarEventTitleFormatter, MOMENT, CalendarMomentDateFormatter, CalendarNativeDateFormatter, CalendarAngularDateFormatter, CalendarDateFormatter, CalendarUtils, CalendarMonthViewComponent, CalendarMonthModule, CalendarWeekViewComponent, CalendarWeekModule, CalendarDayViewComponent, CalendarDayModule, CalendarDatePipe as ɵh, CalendarEventActionsComponent as ɵa, CalendarEventTitleComponent as ɵb, CalendarEventTitlePipe as ɵi, CalendarNextViewDirective as ɵf, CalendarPreviousViewDirective as ɵe, CalendarTodayDirective as ɵg, CalendarTooltipDirective as ɵd, CalendarTooltipWindowComponent as ɵc, ClickDirective as ɵj, CalendarAllDayEventComponent as ɵp, CalendarDayViewEventComponent as ɵr, CalendarDayViewHourSegmentComponent as ɵq, CalendarMonthCellComponent as ɵk, CalendarMonthViewHeaderComponent as ɵm, CalendarOpenDayEventsComponent as ɵl, CalendarWeekViewEventComponent as ɵo, CalendarWeekViewHeaderComponent as ɵn };\n//# sourceMappingURL=angular-calendar.js.map\n",null]}